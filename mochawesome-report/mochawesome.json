{
  "stats": {
    "suites": 32,
    "tests": 118,
    "passes": 103,
    "pending": 0,
    "failures": 15,
    "start": "2024-12-10T15:13:52.697Z",
    "end": "2024-12-10T15:13:52.737Z",
    "duration": 40,
    "testsRegistered": 118,
    "passPercent": 87.28813559322035,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b3a2c71d-2901-45ef-b1d1-2651281fea05",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f2e20d17-c48f-4fe4-9811-adda149b8ed7",
          "title": "Tests for at.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/at.test.js",
          "file": "/test/at.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "965fbe80-0b20-4a22-8036-5cda297a1d78",
              "title": "Basic Functionality",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/at.test.js",
              "file": "/test/at.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve values based on single-level paths",
                  "fullTitle": "Tests for at.js Basic Functionality should retrieve values based on single-level paths",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: 1, b: 2, c: 3 };\nexpect(at(object, [\"a\", \"b\"])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "bfe22018-1fe9-4b49-b64b-96812782d076",
                  "parentUUID": "965fbe80-0b20-4a22-8036-5cda297a1d78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should retrieve values based on nested paths",
                  "fullTitle": "Tests for at.js Basic Functionality should retrieve values based on nested paths",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: { b: { c: 3 } }, d: 4 };\nexpect(at(object, [\"a.b.c\", \"d\"])).to.deep.equal([3, 4]);",
                  "err": {},
                  "uuid": "8a7d2bab-a2e9-4c66-8407-e5df5f79a0a2",
                  "parentUUID": "965fbe80-0b20-4a22-8036-5cda297a1d78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfe22018-1fe9-4b49-b64b-96812782d076",
                "8a7d2bab-a2e9-4c66-8407-e5df5f79a0a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c6026a5e-52a5-4348-b6d4-f8849c023c98",
              "title": "Array and Mixed Object Paths",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/at.test.js",
              "file": "/test/at.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve values from arrays within objects",
                  "fullTitle": "Tests for at.js Array and Mixed Object Paths should retrieve values from arrays within objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: [{ b: { c: 3 } }, 4] };\nexpect(at(object, [\"a[0].b.c\", \"a[1]\"])).to.deep.equal([3, 4]);",
                  "err": {},
                  "uuid": "b3498e80-daa8-40d7-9c2b-6fa7834b620a",
                  "parentUUID": "c6026a5e-52a5-4348-b6d4-f8849c023c98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle objects with arrays as keys",
                  "fullTitle": "Tests for at.js Array and Mixed Object Paths should handle objects with arrays as keys",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { \"a[0]\": { b: 2 } };\nexpect(at(object, [\"a[0].b\"])).to.deep.equal([undefined]);",
                  "err": {},
                  "uuid": "628d29aa-6e39-466f-9680-a3de9e121aad",
                  "parentUUID": "c6026a5e-52a5-4348-b6d4-f8849c023c98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3498e80-daa8-40d7-9c2b-6fa7834b620a",
                "628d29aa-6e39-466f-9680-a3de9e121aad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e81fc3b-0067-47e1-af2f-007750b34409",
              "title": "Edge Cases",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/at.test.js",
              "file": "/test/at.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return undefined for non-existent paths",
                  "fullTitle": "Tests for at.js Edge Cases should return undefined for non-existent paths",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: 1 };\nexpect(at(object, [\"b\"])).to.deep.equal([undefined]);",
                  "err": {},
                  "uuid": "a4ca25be-278c-4e68-8d17-130094787884",
                  "parentUUID": "8e81fc3b-0067-47e1-af2f-007750b34409",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle null or undefined input objects",
                  "fullTitle": "Tests for at.js Edge Cases should handle null or undefined input objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(at(null, [\"a\"])).to.deep.equal([undefined]);\nexpect(at(undefined, [\"a\"])).to.deep.equal([undefined]);",
                  "err": {},
                  "uuid": "9e91be0e-9986-45bc-965a-53fa79116ab4",
                  "parentUUID": "8e81fc3b-0067-47e1-af2f-007750b34409",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty paths",
                  "fullTitle": "Tests for at.js Edge Cases should handle empty paths",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: 1 };\nexpect(at(object)).to.deep.equal([]);",
                  "err": {},
                  "uuid": "e6bba8f3-6cd4-4f57-8a56-4dd67bc1813e",
                  "parentUUID": "8e81fc3b-0067-47e1-af2f-007750b34409",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty object input",
                  "fullTitle": "Tests for at.js Edge Cases should handle empty object input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = {};\nexpect(at(object, [\"a\"])).to.deep.equal([undefined]);",
                  "err": {},
                  "uuid": "ed92ba97-e583-4756-98bc-7985dc2f08e2",
                  "parentUUID": "8e81fc3b-0067-47e1-af2f-007750b34409",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4ca25be-278c-4e68-8d17-130094787884",
                "9e91be0e-9986-45bc-965a-53fa79116ab4",
                "e6bba8f3-6cd4-4f57-8a56-4dd67bc1813e",
                "ed92ba97-e583-4756-98bc-7985dc2f08e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc4509ef-b070-4569-8381-0339d9a66e2f",
              "title": "Flattening Behavior",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/at.test.js",
              "file": "/test/at.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle multiple paths passed as separate arguments",
                  "fullTitle": "Tests for at.js Flattening Behavior should handle multiple paths passed as separate arguments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: 1, b: 2 };\nexpect(at(object, \"a\", \"b\")).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "0c5f253a-620d-4077-841a-e9e6aa4a805d",
                  "parentUUID": "bc4509ef-b070-4569-8381-0339d9a66e2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle paths passed as arrays",
                  "fullTitle": "Tests for at.js Flattening Behavior should handle paths passed as arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: 1, b: 2, c: 3 };\nexpect(at(object, [\"a\", \"b\"], \"c\")).to.deep.equal([1, 2, 3]);",
                  "err": {},
                  "uuid": "a5e1db13-796f-499c-82b4-7011889b2fd7",
                  "parentUUID": "bc4509ef-b070-4569-8381-0339d9a66e2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should correctly flatten nested path arrays",
                  "fullTitle": "Tests for at.js Flattening Behavior should correctly flatten nested path arrays",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: 1, b: { c: 2 } };\nexpect(at(object, [[\"a\"], [\"b.c\"]])).to.deep.equal([1, 2]);",
                  "err": {
                    "message": "AssertionError: expected [ 1, undefined ] to deeply equal [ 1, 2 ]",
                    "estack": "AssertionError: expected [ 1, undefined ] to deeply equal [ 1, 2 ]\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/at.test.js:64:52)\n    at process.processImmediate (node:internal/timers:511:21)",
                    "diff": " [\n   1\n-   [undefined]\n+   2\n ]\n"
                  },
                  "uuid": "3fe5b7bb-a907-4d13-9664-196a789bde53",
                  "parentUUID": "bc4509ef-b070-4569-8381-0339d9a66e2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c5f253a-620d-4077-841a-e9e6aa4a805d",
                "a5e1db13-796f-499c-82b4-7011889b2fd7"
              ],
              "failures": [
                "3fe5b7bb-a907-4d13-9664-196a789bde53"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "889e1603-5bf4-4fe3-a741-d92d9afe03c0",
              "title": "Complex Objects",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/at.test.js",
              "file": "/test/at.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve values from deeply nested objects",
                  "fullTitle": "Tests for at.js Complex Objects should retrieve values from deeply nested objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { a: { b: { c: { d: 5 } } } };\nexpect(at(object, [\"a.b.c.d\"])).to.deep.equal([5]);",
                  "err": {},
                  "uuid": "671e07d5-0ca2-4c7a-956c-38425679060d",
                  "parentUUID": "889e1603-5bf4-4fe3-a741-d92d9afe03c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle objects with numeric keys",
                  "fullTitle": "Tests for at.js Complex Objects should handle objects with numeric keys",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const object = { 0: { a: 1 }, 1: { b: 2 } };\nexpect(at(object, [\"0.a\", \"1.b\"])).to.deep.equal([1, 2]);",
                  "err": {},
                  "uuid": "0ac2ae6c-487c-440c-8030-92a360794c8f",
                  "parentUUID": "889e1603-5bf4-4fe3-a741-d92d9afe03c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "671e07d5-0ca2-4c7a-956c-38425679060d",
                "0ac2ae6c-487c-440c-8030-92a360794c8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
          "title": "Tests for chunk.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/chunk.test.js",
          "file": "/test/chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should call chunk with size 0 and return an empty array",
              "fullTitle": "Tests for chunk.js should call chunk with size 0 and return an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c'];\nconst size = 0;\nexpect(chunk(array, size)).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "f9badd26-6e49-4862-afa9-3b581f053044",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk with negative size and return an empty array",
              "fullTitle": "Tests for chunk.js should call chunk with negative size and return an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c'];\nconst size = -1;\nexpect(chunk(array, size)).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "3508c5a6-94aa-4302-8fef-97e7367d125e",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk with a size larger than the array's length and return the original array",
              "fullTitle": "Tests for chunk.js should call chunk with a size larger than the array's length and return the original array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c'];\nconst size = 5;\nexpect(chunk(array, size)).to.deep.equal(array);",
              "err": {
                "message": "AssertionError: expected [ [ 'a', 'b', 'c', undefined, …(1) ] ] to deeply equal [ 'a', 'b', 'c' ]",
                "estack": "AssertionError: expected [ [ 'a', 'b', 'c', undefined, …(1) ] ] to deeply equal [ 'a', 'b', 'c' ]\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/chunk.test.js:20:40)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": " [\n-   [\n-     \"a\"\n-     \"b\"\n-     \"c\"\n-     [undefined]\n-     [undefined]\n-   ]\n+   \"a\"\n+   \"b\"\n+   \"c\"\n ]\n"
              },
              "uuid": "ffb5e8f5-56ff-4a39-9071-0c1e1f1b9ebe",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk on an empty array and return an empty array",
              "fullTitle": "Tests for chunk.js should call chunk on an empty array and return an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst size = 2;\nexpect(chunk(array, size)).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "ccf853ca-1972-455d-9cc4-cd42b8ccb639",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk with size 1 and return the original elements wrapped in single-element lists",
              "fullTitle": "Tests for chunk.js should call chunk with size 1 and return the original elements wrapped in single-element lists",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c'];\nexpect(chunk(array)).to.deep.equal([['a'], ['b'], ['c']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c' ], undefined, undefined ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ] ]",
                "estack": "AssertionError: expected [ [ 'c' ], undefined, undefined ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ] ]\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/chunk.test.js:31:34)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n   ]\n ]\n"
              },
              "uuid": "f5f65ed7-41ee-4480-a4b0-4c60974dc76a",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk with no size given, defaulting to 1",
              "fullTitle": "Tests for chunk.js should call chunk with no size given, defaulting to 1",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c'];\nexpect(chunk(array)).to.deep.equal([['a'], ['b'], ['c']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c' ], undefined, undefined ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ] ]",
                "estack": "AssertionError: expected [ [ 'c' ], undefined, undefined ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ] ]\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/chunk.test.js:36:34)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n   ]\n ]\n"
              },
              "uuid": "e6a3602b-0ba8-4dd6-8217-69abf2d25659",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk with a size that evenly divides the array's length",
              "fullTitle": "Tests for chunk.js should call chunk with a size that evenly divides the array's length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c', 'd', 'e', 'f'];\nconst size = 2;\nexpect(chunk(array, size)).to.deep.equal([['a', 'b'], ['c', 'd'], ['e', 'f']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'e', 'f' ], undefined, undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ], …(1) ]",
                "estack": "AssertionError: expected [ [ 'e', 'f' ], undefined, undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ], …(1) ]\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/chunk.test.js:42:40)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+     \"d\"\n+   ]\n+   [\n     \"e\"\n     \"f\"\n   ]\n ]\n"
              },
              "uuid": "4662fe0d-0683-4b7c-84c7-2c650981f5ad",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk with a size that does not evenly divide the array's length",
              "fullTitle": "Tests for chunk.js should call chunk with a size that does not evenly divide the array's length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c', 'd', 'e'];\nconst size = 2;\nexpect(chunk(array, size)).to.deep.equal([['a', 'b'], ['c', 'd'], ['e']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'e', undefined ], undefined, …(1) ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ], [ 'e' ] ]",
                "estack": "AssertionError: expected [ [ 'e', undefined ], undefined, …(1) ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ], [ 'e' ] ]\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/chunk.test.js:48:40)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+     \"d\"\n+   ]\n+   [\n     \"e\"\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "3367b18b-56ba-407e-9311-9fc1bc897b7a",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call chunk with a size of the array's length",
              "fullTitle": "Tests for chunk.js should call chunk with a size of the array's length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c', 'd', 'e'];\nconst size = 5;\nexpect(chunk(array, size)).to.deep.equal([['a', 'b', 'c', 'd', 'e']]);",
              "err": {},
              "uuid": "687bad8f-7875-4b43-a6b4-4fbe37782a0f",
              "parentUUID": "e9ef6ddf-383e-4371-ab1e-9580f4f96bb6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9badd26-6e49-4862-afa9-3b581f053044",
            "3508c5a6-94aa-4302-8fef-97e7367d125e",
            "ccf853ca-1972-455d-9cc4-cd42b8ccb639",
            "687bad8f-7875-4b43-a6b4-4fbe37782a0f"
          ],
          "failures": [
            "ffb5e8f5-56ff-4a39-9071-0c1e1f1b9ebe",
            "f5f65ed7-41ee-4480-a4b0-4c60974dc76a",
            "e6a3602b-0ba8-4dd6-8217-69abf2d25659",
            "4662fe0d-0683-4b7c-84c7-2c650981f5ad",
            "3367b18b-56ba-407e-9311-9fc1bc897b7a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
          "title": "Tests for drop.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/drop.test.js",
          "file": "/test/drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should call drop with no `n` given and default to 1",
              "fullTitle": "Tests for drop.js should call drop with no `n` given and default to 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nexpect(drop(array)).to.deep.equal([2, 3]);",
              "err": {},
              "uuid": "d68b862e-e003-43a0-a10a-a2d73ab3a4c1",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call drop with `n` as 0 and return the original array",
              "fullTitle": "Tests for drop.js should call drop with `n` as 0 and return the original array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nconst n = 0;\nexpect(drop(array, n)).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "d5779ae7-8993-40b2-83eb-4fb068cb9ded",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call drop with `n` greater than the array length and return an empty array",
              "fullTitle": "Tests for drop.js should call drop with `n` greater than the array length and return an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nconst n = 5;\nexpect(drop(array, n)).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "014c7458-050c-4005-8458-10d210a3ddf4",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call drop with `n` equal to the array length and return an empty array",
              "fullTitle": "Tests for drop.js should call drop with `n` equal to the array length and return an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nconst n = 3;\nexpect(drop(array, n)).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "28f26e36-2020-4bc6-95e3-1ede5ea9f498",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call drop with `n` as a negative number and return the original array",
              "fullTitle": "Tests for drop.js should call drop with `n` as a negative number and return the original array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nconst n = -1;\nexpect(drop(array, n)).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "56683fb2-2d74-4fdd-9f08-e94d5e35f5bb",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call drop on an empty array and return an empty array",
              "fullTitle": "Tests for drop.js should call drop on an empty array and return an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst n = 2;\nexpect(drop(array, n)).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "9347acf8-1f86-4464-9c38-a00e61f6396e",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call drop with `n` as 1 and return the array with the first element removed",
              "fullTitle": "Tests for drop.js should call drop with `n` as 1 and return the array with the first element removed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nconst n = 1;\nexpect(drop(array, n)).to.deep.equal([2, 3]);",
              "err": {},
              "uuid": "e423b2c0-9053-428f-bef4-c0d69689a0ad",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should call drop with `n` less than the array length, removing multiple elements",
              "fullTitle": "Tests for drop.js should call drop with `n` less than the array length, removing multiple elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4, 5];\nconst n = 3;\nexpect(drop(array, n)).to.deep.equal([4, 5]);",
              "err": {},
              "uuid": "34d782b9-69e2-4e3f-a52d-186144ab6382",
              "parentUUID": "80eeb1e0-fc28-4793-a3dc-5625960a8023",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d68b862e-e003-43a0-a10a-a2d73ab3a4c1",
            "d5779ae7-8993-40b2-83eb-4fb068cb9ded",
            "014c7458-050c-4005-8458-10d210a3ddf4",
            "28f26e36-2020-4bc6-95e3-1ede5ea9f498",
            "56683fb2-2d74-4fdd-9f08-e94d5e35f5bb",
            "9347acf8-1f86-4464-9c38-a00e61f6396e",
            "e423b2c0-9053-428f-bef4-c0d69689a0ad",
            "34d782b9-69e2-4e3f-a52d-186144ab6382"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e553db7-e335-4686-a875-d516fdca6bd1",
          "title": "Tests for eq.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js",
          "file": "/test/eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "af5c3659-51f6-4ebe-9d06-8e5f8f623192",
              "title": "Basic Functionality",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js",
              "file": "/test/eq.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for primitive values that are strictly equal",
                  "fullTitle": "Tests for eq.js Basic Functionality should return true for primitive values that are strictly equal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(1, 1)).to.be.true;\nexpect(eq(\"a\", \"a\")).to.be.true;\nexpect(eq(true, true)).to.be.true;",
                  "err": {},
                  "uuid": "d4d4dcd5-4ef2-47f3-a554-e98215baa9dc",
                  "parentUUID": "af5c3659-51f6-4ebe-9d06-8e5f8f623192",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for primitive values that are not strictly equal",
                  "fullTitle": "Tests for eq.js Basic Functionality should return false for primitive values that are not strictly equal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(1, 2)).to.be.false;\nexpect(eq(\"a\", \"b\")).to.be.false;\nexpect(eq(true, false)).to.be.false;",
                  "err": {},
                  "uuid": "c1720cf8-1494-4a78-ad8b-7284bdc14a6b",
                  "parentUUID": "af5c3659-51f6-4ebe-9d06-8e5f8f623192",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4d4dcd5-4ef2-47f3-a554-e98215baa9dc",
                "c1720cf8-1494-4a78-ad8b-7284bdc14a6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0d04008-a08b-4e10-b1cc-dcca4cb5a124",
              "title": "Object References",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js",
              "file": "/test/eq.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true when comparing the same object reference",
                  "fullTitle": "Tests for eq.js Object References should return true when comparing the same object reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: 1 };\nexpect(eq(obj, obj)).to.be.true;",
                  "err": {},
                  "uuid": "647cef64-25f5-4136-b846-9001c946f05b",
                  "parentUUID": "c0d04008-a08b-4e10-b1cc-dcca4cb5a124",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false when comparing different objects with the same content",
                  "fullTitle": "Tests for eq.js Object References should return false when comparing different objects with the same content",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj1 = { a: 1 };\nconst obj2 = { a: 1 };\nexpect(eq(obj1, obj2)).to.be.false;",
                  "err": {},
                  "uuid": "7612b9e9-0a7d-430f-ad11-68f273840dfd",
                  "parentUUID": "c0d04008-a08b-4e10-b1cc-dcca4cb5a124",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "647cef64-25f5-4136-b846-9001c946f05b",
                "7612b9e9-0a7d-430f-ad11-68f273840dfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5932628d-0aa8-49b7-8490-382863f54cec",
              "title": "Special Cases",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js",
              "file": "/test/eq.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true when comparing NaN with NaN",
                  "fullTitle": "Tests for eq.js Special Cases should return true when comparing NaN with NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(NaN, NaN)).to.be.true;",
                  "err": {},
                  "uuid": "9237b257-a872-4ade-88c0-8ee9afe9c8ab",
                  "parentUUID": "5932628d-0aa8-49b7-8490-382863f54cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false when comparing primitive values and their object wrappers",
                  "fullTitle": "Tests for eq.js Special Cases should return false when comparing primitive values and their object wrappers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(\"a\", Object(\"a\"))).to.be.false;\nexpect(eq(1, Object(1))).to.be.false;\nexpect(eq(true, Object(true))).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js:38:41)\n    at process.processImmediate (node:internal/timers:511:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "402faa8f-93f8-4e84-ac03-ade95548611d",
                  "parentUUID": "5932628d-0aa8-49b7-8490-382863f54cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false when comparing null and undefined",
                  "fullTitle": "Tests for eq.js Special Cases should return false when comparing null and undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(null, undefined)).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js:44:40)\n    at process.processImmediate (node:internal/timers:511:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "f321aeb3-1986-4aa0-bad5-1eeed099d905",
                  "parentUUID": "5932628d-0aa8-49b7-8490-382863f54cec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9237b257-a872-4ade-88c0-8ee9afe9c8ab"
              ],
              "failures": [
                "402faa8f-93f8-4e84-ac03-ade95548611d",
                "f321aeb3-1986-4aa0-bad5-1eeed099d905"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29c5cc3d-e2e7-4b73-998d-cbf769b8a046",
              "title": "Edge Cases",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js",
              "file": "/test/eq.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return false for values of different types",
                  "fullTitle": "Tests for eq.js Edge Cases should return false for values of different types",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(1, \"1\")).to.be.false;\nexpect(eq(true, 1)).to.be.false;\nexpect(eq(null, 0)).to.be.false;",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/eq.test.js:50:31)\n    at process.processImmediate (node:internal/timers:511:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "706fb3a0-173c-416e-96ee-397d8c6198a3",
                  "parentUUID": "29c5cc3d-e2e7-4b73-998d-cbf769b8a046",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for zero and negative zero",
                  "fullTitle": "Tests for eq.js Edge Cases should return true for zero and negative zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(0, -0)).to.be.true;\nexpect(eq(-0, 0)).to.be.true;",
                  "err": {},
                  "uuid": "367d3aba-face-494d-bbe5-442f13b9c07f",
                  "parentUUID": "29c5cc3d-e2e7-4b73-998d-cbf769b8a046",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for positive zero and NaN",
                  "fullTitle": "Tests for eq.js Edge Cases should return false for positive zero and NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(eq(0, NaN)).to.be.false;",
                  "err": {},
                  "uuid": "62199c5a-69a5-4620-884f-7382ee265051",
                  "parentUUID": "29c5cc3d-e2e7-4b73-998d-cbf769b8a046",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "367d3aba-face-494d-bbe5-442f13b9c07f",
                "62199c5a-69a5-4620-884f-7382ee265051"
              ],
              "failures": [
                "706fb3a0-173c-416e-96ee-397d8c6198a3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fef4df75-bfef-4187-afa9-61128e47ad39",
          "title": "Tests for filter.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/filter.test.js",
          "file": "/test/filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return an empty array for an empty input array",
              "fullTitle": "Tests for filter.js should return an empty array for an empty input array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = filter([], (_elem) => true);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/filter.test.js:7:28)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "73feb500-93d5-4d9a-8cdc-5df93f53d952",
              "parentUUID": "fef4df75-bfef-4187-afa9-61128e47ad39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array for an always-false predicate",
              "fullTitle": "Tests for filter.js should return an empty array for an always-false predicate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = filter(['a', 'b', 'c'], (_elem) => false);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/filter.test.js:12:28)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "f3fadda4-13f0-488d-83c6-afb7c79f68fb",
              "parentUUID": "fef4df75-bfef-4187-afa9-61128e47ad39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the input array for an always-true predicate",
              "fullTitle": "Tests for filter.js should return the input array for an always-true predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c'];\nconst result = filter(array, (_elem) => true);\nexpect(result).to.deep.equal(array);",
              "err": {},
              "uuid": "b926a1bc-7b5c-4162-a188-b464bb8eb985",
              "parentUUID": "fef4df75-bfef-4187-afa9-61128e47ad39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter numbers divisible by 3",
              "fullTitle": "Tests for filter.js should filter numbers divisible by 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (n) => n % 3 == 0);\nexpect(result).to.deep.equal([3, 6, 9]);",
              "err": {},
              "uuid": "1bc9972c-a66a-4516-bceb-348abd055054",
              "parentUUID": "fef4df75-bfef-4187-afa9-61128e47ad39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter active users from an array of users where the first one is the only active",
              "fullTitle": "Tests for filter.js should filter active users from an array of users where the first one is the only active",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred', 'active': false }\n];\nconst result = filter(users, ({ active }) => active);\nexpect(result).to.deep.equal([{ 'user': 'barney', 'active': true }]);",
              "err": {},
              "uuid": "d122f619-0397-40e8-98f6-0c3dc10939a3",
              "parentUUID": "fef4df75-bfef-4187-afa9-61128e47ad39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter active users from an array of users where the last one is the only active",
              "fullTitle": "Tests for filter.js should filter active users from an array of users where the last one is the only active",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n  { 'user': 'fred', 'active': false },\n  { 'user': 'barney', 'active': true }\n];\nconst result = filter(users, ({ active }) => active);\nexpect(result).to.deep.equal([{ 'user': 'barney', 'active': true }]);",
              "err": {},
              "uuid": "d0e53074-6a17-4c14-8801-bc7d802686f3",
              "parentUUID": "fef4df75-bfef-4187-afa9-61128e47ad39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b926a1bc-7b5c-4162-a188-b464bb8eb985",
            "1bc9972c-a66a-4516-bceb-348abd055054",
            "d122f619-0397-40e8-98f6-0c3dc10939a3",
            "d0e53074-6a17-4c14-8801-bc7d802686f3"
          ],
          "failures": [
            "73feb500-93d5-4d9a-8cdc-5df93f53d952",
            "f3fadda4-13f0-488d-83c6-afb7c79f68fb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d61b1cb-6c9c-4ab8-96e1-40777ed2a093",
          "title": "Tests for get.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/get.test.js",
          "file": "/test/get.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "56037606-4006-4206-acde-d134408f3943",
              "title": "Basic Functionality",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/get.test.js",
              "file": "/test/get.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve a nested value with a string path",
                  "fullTitle": "Tests for get.js Basic Functionality should retrieve a nested value with a string path",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: { b: { c: 3 } } };\nexpect(get(obj, \"a.b.c\")).to.equal(3);",
                  "err": {},
                  "uuid": "fed98870-1ec7-420c-b461-14cab690e778",
                  "parentUUID": "56037606-4006-4206-acde-d134408f3943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should retrieve a nested value with an array path",
                  "fullTitle": "Tests for get.js Basic Functionality should retrieve a nested value with an array path",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: [{ b: { c: 3 } }] };\nexpect(get(obj, [\"a\", \"0\", \"b\", \"c\"])).to.equal(3);",
                  "err": {},
                  "uuid": "f0ad8748-959f-49c4-98db-b8fd487210ef",
                  "parentUUID": "56037606-4006-4206-acde-d134408f3943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined if the path does not exist",
                  "fullTitle": "Tests for get.js Basic Functionality should return undefined if the path does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: { b: { c: 3 } } };\nexpect(get(obj, \"a.b.d\")).to.be.undefined;",
                  "err": {},
                  "uuid": "a7d35809-33b0-4a31-b08a-e7b521419c4a",
                  "parentUUID": "56037606-4006-4206-acde-d134408f3943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the default value if the resolved value is undefined",
                  "fullTitle": "Tests for get.js Basic Functionality should return the default value if the resolved value is undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: { b: { c: 3 } } };\nexpect(get(obj, \"a.b.d\", \"default\")).to.equal(\"default\");",
                  "err": {},
                  "uuid": "ecf7985c-4675-44a4-a68d-56994e6d347c",
                  "parentUUID": "56037606-4006-4206-acde-d134408f3943",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fed98870-1ec7-420c-b461-14cab690e778",
                "f0ad8748-959f-49c4-98db-b8fd487210ef",
                "a7d35809-33b0-4a31-b08a-e7b521419c4a",
                "ecf7985c-4675-44a4-a68d-56994e6d347c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a45c904e-34d8-49ae-a1a0-277aa0f5eeec",
              "title": "Edge Cases with Paths",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/get.test.js",
              "file": "/test/get.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle empty string as a path and return undefined",
                  "fullTitle": "Tests for get.js Edge Cases with Paths should handle empty string as a path and return undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: { b: 3 } };\nexpect(get(obj, \"\")).to.be.undefined;",
                  "err": {},
                  "uuid": "945a8681-28b7-4aae-9703-a1ab0b40c899",
                  "parentUUID": "a45c904e-34d8-49ae-a1a0-277aa0f5eeec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty array as a path and return the original object",
                  "fullTitle": "Tests for get.js Edge Cases with Paths should handle empty array as a path and return the original object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: { b: 3 } };\nexpect(get(obj, [])).to.equal(obj);",
                  "err": {
                    "message": "AssertionError: expected undefined to equal { a: { b: 3 } }",
                    "estack": "AssertionError: expected undefined to equal { a: { b: 3 } }\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/get.test.js:35:31)\n    at process.processImmediate (node:internal/timers:511:21)",
                    "diff": null
                  },
                  "uuid": "666e62ff-d079-4ec2-a0b2-dc28d6738596",
                  "parentUUID": "a45c904e-34d8-49ae-a1a0-277aa0f5eeec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle paths with special characters",
                  "fullTitle": "Tests for get.js Edge Cases with Paths should handle paths with special characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { \"a.b\": { c: 3 } };\nexpect(get(obj, [\"a.b\", \"c\"])).to.equal(3);",
                  "err": {},
                  "uuid": "5c8cc62c-1f83-4dfa-a5b2-c619b2245f58",
                  "parentUUID": "a45c904e-34d8-49ae-a1a0-277aa0f5eeec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle paths with numeric indices in strings",
                  "fullTitle": "Tests for get.js Edge Cases with Paths should handle paths with numeric indices in strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: [{ b: 3 }] };\nexpect(get(obj, \"a[0].b\")).to.equal(3);",
                  "err": {},
                  "uuid": "fa02ed2c-e3d7-4ae0-a582-01ca26d836a0",
                  "parentUUID": "a45c904e-34d8-49ae-a1a0-277aa0f5eeec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle paths with trailing dots",
                  "fullTitle": "Tests for get.js Edge Cases with Paths should handle paths with trailing dots",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: { b: { c: 3 } } };\nexpect(get(obj, \"a.b.c.\")).to.equal(3);",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 3",
                    "estack": "AssertionError: expected undefined to equal 3\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/get.test.js:50:37)\n    at process.processImmediate (node:internal/timers:511:21)",
                    "diff": null
                  },
                  "uuid": "012b60ae-6192-4472-88f3-ce15003a4fe0",
                  "parentUUID": "a45c904e-34d8-49ae-a1a0-277aa0f5eeec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "945a8681-28b7-4aae-9703-a1ab0b40c899",
                "5c8cc62c-1f83-4dfa-a5b2-c619b2245f58",
                "fa02ed2c-e3d7-4ae0-a582-01ca26d836a0"
              ],
              "failures": [
                "666e62ff-d079-4ec2-a0b2-dc28d6738596",
                "012b60ae-6192-4472-88f3-ce15003a4fe0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e569217-db36-4adc-a42e-7bfcdbc8e8c5",
              "title": "Null and Undefined Handling",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/get.test.js",
              "file": "/test/get.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the default value if the object is null",
                  "fullTitle": "Tests for get.js Null and Undefined Handling should return the default value if the object is null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(get(null, \"a.b\", \"default\")).to.equal(\"default\");",
                  "err": {},
                  "uuid": "c054a1df-0c48-44ed-a7c7-33b640b134f8",
                  "parentUUID": "5e569217-db36-4adc-a42e-7bfcdbc8e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the default value if the object is undefined",
                  "fullTitle": "Tests for get.js Null and Undefined Handling should return the default value if the object is undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(get(undefined, \"a.b\", \"default\")).to.equal(\"default\");",
                  "err": {},
                  "uuid": "87ad7a13-5f45-4af6-ac08-3c85addbedce",
                  "parentUUID": "5e569217-db36-4adc-a42e-7bfcdbc8e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined if the object is null and no default value is provided",
                  "fullTitle": "Tests for get.js Null and Undefined Handling should return undefined if the object is null and no default value is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(get(null, \"a.b\")).to.be.undefined;",
                  "err": {},
                  "uuid": "5801f303-bd16-44b7-abba-5be097e2be34",
                  "parentUUID": "5e569217-db36-4adc-a42e-7bfcdbc8e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined if the object is undefined and no default value is provided",
                  "fullTitle": "Tests for get.js Null and Undefined Handling should return undefined if the object is undefined and no default value is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(get(undefined, \"a.b\")).to.be.undefined;",
                  "err": {},
                  "uuid": "731aebc8-d38b-4f4d-b4e1-dcf5dd4b957f",
                  "parentUUID": "5e569217-db36-4adc-a42e-7bfcdbc8e8c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c054a1df-0c48-44ed-a7c7-33b640b134f8",
                "87ad7a13-5f45-4af6-ac08-3c85addbedce",
                "5801f303-bd16-44b7-abba-5be097e2be34",
                "731aebc8-d38b-4f4d-b4e1-dcf5dd4b957f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ece8f86-0f2e-4733-b233-13abd3e2f9a8",
              "title": "Special Data Types",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/get.test.js",
              "file": "/test/get.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve values from arrays using numeric indices",
                  "fullTitle": "Tests for get.js Special Data Types should retrieve values from arrays using numeric indices",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const arr = [\n  [1, 2, 3],\n  [4, 5, 6],\n];\nexpect(get(arr, \"[0][2]\")).to.equal(3);",
                  "err": {},
                  "uuid": "53162e1b-f4ee-4087-afcb-0eb4869c01dc",
                  "parentUUID": "1ece8f86-0f2e-4733-b233-13abd3e2f9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle functions as values",
                  "fullTitle": "Tests for get.js Special Data Types should handle functions as values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const obj = { a: { b: () => 42 } };\nexpect(get(obj, \"a.b\")()).to.equal(42);",
                  "err": {},
                  "uuid": "02f9c8fd-9aa3-4944-809e-06ea64ba68bc",
                  "parentUUID": "1ece8f86-0f2e-4733-b233-13abd3e2f9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle objects with prototype properties",
                  "fullTitle": "Tests for get.js Special Data Types should handle objects with prototype properties",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const proto = { b: 2 };\nconst obj = Object.create(proto);\nexpect(get(obj, \"b\")).to.equal(2);",
                  "err": {},
                  "uuid": "666b4a44-0209-405a-8dce-616626ce59f9",
                  "parentUUID": "1ece8f86-0f2e-4733-b233-13abd3e2f9a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53162e1b-f4ee-4087-afcb-0eb4869c01dc",
                "02f9c8fd-9aa3-4944-809e-06ea64ba68bc",
                "666b4a44-0209-405a-8dce-616626ce59f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "539c60e3-e08f-4465-abfa-20cc8c87d0ac",
          "title": "Tests for isDate.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "918e8de0-cf76-4bf9-8fd5-0888be0b2278",
              "title": "Valid Date Objects",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/isDate.test.js",
              "file": "/test/isDate.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for current Date objects",
                  "fullTitle": "Tests for isDate.js Valid Date Objects should return true for current Date objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = new Date();\nexpect(isDate(now)).to.be.true;",
                  "err": {},
                  "uuid": "cbd27acb-b907-49c2-96e7-b0918f1a5129",
                  "parentUUID": "918e8de0-cf76-4bf9-8fd5-0888be0b2278",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for valid Date objects with specific dates",
                  "fullTitle": "Tests for isDate.js Valid Date Objects should return true for valid Date objects with specific dates",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const specificDate = new Date(\"2024-12-06T00:00:00Z\");\nexpect(isDate(specificDate)).to.be.true;",
                  "err": {},
                  "uuid": "5eea57e6-fefd-4722-b79a-5dcd64145c71",
                  "parentUUID": "918e8de0-cf76-4bf9-8fd5-0888be0b2278",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for Date objects created using timestamps",
                  "fullTitle": "Tests for isDate.js Valid Date Objects should return true for Date objects created using timestamps",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const timestampDate = new Date(1701825600000); //'2024-12-06'\nexpect(isDate(timestampDate)).to.be.true;",
                  "err": {},
                  "uuid": "2fc9f090-45b9-4a5a-a599-0ec0f5f9f33e",
                  "parentUUID": "918e8de0-cf76-4bf9-8fd5-0888be0b2278",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbd27acb-b907-49c2-96e7-b0918f1a5129",
                "5eea57e6-fefd-4722-b79a-5dcd64145c71",
                "2fc9f090-45b9-4a5a-a599-0ec0f5f9f33e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21037897-918e-41f2-9e1d-e1bd6c4df76b",
              "title": "Invalid Inputs",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/isDate.test.js",
              "file": "/test/isDate.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return false for plain strings, even if they resemble dates",
                  "fullTitle": "Tests for isDate.js Invalid Inputs should return false for plain strings, even if they resemble dates",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(\"2024-12-06\")).to.be.false;\nexpect(isDate(\"December 6, 2024\")).to.be.false;\nexpect(isDate(\"Fri Dec 6 2024\")).to.be.false;",
                  "err": {},
                  "uuid": "da5cdb23-d5a6-4a3a-9ec5-a744dbf79873",
                  "parentUUID": "21037897-918e-41f2-9e1d-e1bd6c4df76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for numbers, even if they resemble timestamps",
                  "fullTitle": "Tests for isDate.js Invalid Inputs should return false for numbers, even if they resemble timestamps",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(1701825600000)).to.be.false;\nexpect(isDate(0)).to.be.false;",
                  "err": {},
                  "uuid": "301016ea-cd8b-49e8-8352-6263c5ec85bd",
                  "parentUUID": "21037897-918e-41f2-9e1d-e1bd6c4df76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for boolean values",
                  "fullTitle": "Tests for isDate.js Invalid Inputs should return false for boolean values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(true)).to.be.false;\nexpect(isDate(false)).to.be.false;",
                  "err": {},
                  "uuid": "de0deac4-283d-46e1-88e0-e2ac46a9795c",
                  "parentUUID": "21037897-918e-41f2-9e1d-e1bd6c4df76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for null and undefined",
                  "fullTitle": "Tests for isDate.js Invalid Inputs should return false for null and undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
                  "err": {},
                  "uuid": "77afeb82-a6cf-4672-a736-159e728f41b6",
                  "parentUUID": "21037897-918e-41f2-9e1d-e1bd6c4df76b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da5cdb23-d5a6-4a3a-9ec5-a744dbf79873",
                "301016ea-cd8b-49e8-8352-6263c5ec85bd",
                "de0deac4-283d-46e1-88e0-e2ac46a9795c",
                "77afeb82-a6cf-4672-a736-159e728f41b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3de2045-2395-42d9-9189-e0238e65d513",
              "title": "Edge Cases with Objects",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/isDate.test.js",
              "file": "/test/isDate.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return false for plain objects",
                  "fullTitle": "Tests for isDate.js Edge Cases with Objects should return false for plain objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate({})).to.be.false;",
                  "err": {},
                  "uuid": "e8f606f6-7407-4ec4-940b-6886a4fb7f9a",
                  "parentUUID": "f3de2045-2395-42d9-9189-e0238e65d513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for objects that mimic Date objects",
                  "fullTitle": "Tests for isDate.js Edge Cases with Objects should return false for objects that mimic Date objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeDate = {\n  toString: () => \"[object Date]\",\n  getTime: () => 12345,\n};\nexpect(isDate(fakeDate)).to.be.false;",
                  "err": {},
                  "uuid": "38e8ef98-f2fa-4a2b-9708-e43c1a3b0141",
                  "parentUUID": "f3de2045-2395-42d9-9189-e0238e65d513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for arrays",
                  "fullTitle": "Tests for isDate.js Edge Cases with Objects should return false for arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate([])).to.be.false;\nexpect(isDate([2024, 12, 6])).to.be.false;",
                  "err": {},
                  "uuid": "e6f5f57a-959b-43e6-a808-80b95a286aff",
                  "parentUUID": "f3de2045-2395-42d9-9189-e0238e65d513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for functions",
                  "fullTitle": "Tests for isDate.js Edge Cases with Objects should return false for functions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn = () => {};\nexpect(isDate(fn)).to.be.false;",
                  "err": {},
                  "uuid": "0a3eba85-9f4d-42be-9c6d-e4e90ec5df65",
                  "parentUUID": "f3de2045-2395-42d9-9189-e0238e65d513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for Map and Set objects",
                  "fullTitle": "Tests for isDate.js Edge Cases with Objects should return false for Map and Set objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
                  "err": {},
                  "uuid": "f29c3866-d9da-43df-9ce6-def1f4163f07",
                  "parentUUID": "f3de2045-2395-42d9-9189-e0238e65d513",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8f606f6-7407-4ec4-940b-6886a4fb7f9a",
                "38e8ef98-f2fa-4a2b-9708-e43c1a3b0141",
                "e6f5f57a-959b-43e6-a808-80b95a286aff",
                "0a3eba85-9f4d-42be-9c6d-e4e90ec5df65",
                "f29c3866-d9da-43df-9ce6-def1f4163f07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac0313e9-9965-482f-ae29-e9f6287408d0",
              "title": "Invalid and Exotic Date Objects",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/isDate.test.js",
              "file": "/test/isDate.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for invalid Date objects (e.g., Invalid Date)",
                  "fullTitle": "Tests for isDate.js Invalid and Exotic Date Objects should return true for invalid Date objects (e.g., Invalid Date)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidDate = new Date(\"Invalid Date\");\nexpect(isDate(invalidDate)).to.be.true;",
                  "err": {},
                  "uuid": "10531014-cf27-4228-a633-b2e26ecec4a0",
                  "parentUUID": "ac0313e9-9965-482f-ae29-e9f6287408d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Date objects with edge case values",
                  "fullTitle": "Tests for isDate.js Invalid and Exotic Date Objects should handle Date objects with edge case values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(new Date(0))).to.be.true;\nexpect(isDate(new Date(NaN))).to.be.true;",
                  "err": {},
                  "uuid": "ddadb663-3d17-4fd3-a58d-a0c93f59285c",
                  "parentUUID": "ac0313e9-9965-482f-ae29-e9f6287408d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10531014-cf27-4228-a633-b2e26ecec4a0",
                "ddadb663-3d17-4fd3-a58d-a0c93f59285c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3e54376-905b-40dd-85df-b7ae6c81ed90",
              "title": "Node.js Specific Behavior",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/isDate.test.js",
              "file": "/test/isDate.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should correctly handle nodeIsDate optimization when available",
                  "fullTitle": "Tests for isDate.js Node.js Specific Behavior should correctly handle nodeIsDate optimization when available",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nodeTypes = { isDate: (value) => value instanceof Date };\nconst customIsDate = nodeTypes.isDate\n  ? (value) => nodeTypes.isDate(value)\n  : isDate;\nexpect(customIsDate(new Date())).to.be.true;\nexpect(customIsDate(\"2024-12-06\")).to.be.false;",
                  "err": {},
                  "uuid": "4026d3ec-c8b9-4a8e-91ec-799d9111c35f",
                  "parentUUID": "e3e54376-905b-40dd-85df-b7ae6c81ed90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4026d3ec-c8b9-4a8e-91ec-799d9111c35f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e381e41-bce4-4418-b335-c89b40f7cc60",
          "title": "Tests for map.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/map.test.js",
          "file": "/test/map.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "190714e0-61af-4abf-b2c1-f123c6b7e5b3",
              "title": "Basic Functionality",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/map.test.js",
              "file": "/test/map.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should apply the iteratee to each element of the array",
                  "fullTitle": "Tests for map.js Basic Functionality should apply the iteratee to each element of the array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const square = (n) => n * n;\nexpect(map([4, 8], square)).to.deep.equal([16, 64]);",
                  "err": {},
                  "uuid": "26872a36-e540-4a8a-b49f-c8fb0a5d00dd",
                  "parentUUID": "190714e0-61af-4abf-b2c1-f123c6b7e5b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an empty array",
                  "fullTitle": "Tests for map.js Basic Functionality should handle an empty array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const identity = (x) => x;\nexpect(map([], identity)).to.deep.equal([]);",
                  "err": {},
                  "uuid": "aea44071-37e6-470c-b10c-9482e247b8f3",
                  "parentUUID": "190714e0-61af-4abf-b2c1-f123c6b7e5b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass the correct arguments to the iteratee",
                  "fullTitle": "Tests for map.js Basic Functionality should pass the correct arguments to the iteratee",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const results = [];\nconst iteratee = (value, index, array) => {\n  results.push({ value, index, array });\n  return value;\n};\nmap([1, 2, 3], iteratee);\nexpect(results).to.deep.equal([\n  { value: 1, index: 0, array: [1, 2, 3] },\n  { value: 2, index: 1, array: [1, 2, 3] },\n  { value: 3, index: 2, array: [1, 2, 3] },\n]);",
                  "err": {},
                  "uuid": "b5d64242-ab66-4c1e-bb9a-ad06d1616920",
                  "parentUUID": "190714e0-61af-4abf-b2c1-f123c6b7e5b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26872a36-e540-4a8a-b49f-c8fb0a5d00dd",
                "aea44071-37e6-470c-b10c-9482e247b8f3",
                "b5d64242-ab66-4c1e-bb9a-ad06d1616920"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6953cf8b-9515-4f52-b640-97442eb60b7c",
              "title": "Edge Cases",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/map.test.js",
              "file": "/test/map.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an empty array if the input is null",
                  "fullTitle": "Tests for map.js Edge Cases should return an empty array if the input is null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const identity = (x) => x;\nexpect(map(null, identity)).to.deep.equal([]);",
                  "err": {},
                  "uuid": "a0c417ee-c736-47cb-8a08-dcc6f8e04cb6",
                  "parentUUID": "6953cf8b-9515-4f52-b640-97442eb60b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty array if the input is undefined",
                  "fullTitle": "Tests for map.js Edge Cases should return an empty array if the input is undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const identity = (x) => x;\nexpect(map(undefined, identity)).to.deep.equal([]);",
                  "err": {},
                  "uuid": "803f07c7-6731-49bd-81cb-0e3b656d86b2",
                  "parentUUID": "6953cf8b-9515-4f52-b640-97442eb60b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not modify the original array",
                  "fullTitle": "Tests for map.js Edge Cases should not modify the original array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = [1, 2, 3];\nconst double = (n) => n * 2;\nmap(input, double);\nexpect(input).to.deep.equal([1, 2, 3]);",
                  "err": {},
                  "uuid": "d3820010-39c5-42da-9743-cc858328b734",
                  "parentUUID": "6953cf8b-9515-4f52-b640-97442eb60b7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0c417ee-c736-47cb-8a08-dcc6f8e04cb6",
                "803f07c7-6731-49bd-81cb-0e3b656d86b2",
                "d3820010-39c5-42da-9743-cc858328b734"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e3e86de-2357-48e8-bf68-3feb0cb8d4ad",
              "title": "Custom Iteratee Functions",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/map.test.js",
              "file": "/test/map.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with a simple transformation function",
                  "fullTitle": "Tests for map.js Custom Iteratee Functions should work with a simple transformation function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const double = (n) => n * 2;\nexpect(map([1, 2, 3], double)).to.deep.equal([2, 4, 6]);",
                  "err": {},
                  "uuid": "67773873-cb0f-4eaa-ba3c-f07698522b3b",
                  "parentUUID": "7e3e86de-2357-48e8-bf68-3feb0cb8d4ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with an iteratee that relies on the index",
                  "fullTitle": "Tests for map.js Custom Iteratee Functions should work with an iteratee that relies on the index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addIndex = (value, index) => value + index;\nexpect(map([10, 20, 30], addIndex)).to.deep.equal([10, 21, 32]);",
                  "err": {},
                  "uuid": "220615a5-8b66-4c8d-a655-0b4a5421342b",
                  "parentUUID": "7e3e86de-2357-48e8-bf68-3feb0cb8d4ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with an iteratee that relies on the array",
                  "fullTitle": "Tests for map.js Custom Iteratee Functions should work with an iteratee that relies on the array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sumWithArrayLength = (value, _, array) => value + array.length;\nexpect(map([1, 2, 3], sumWithArrayLength)).to.deep.equal([4, 5, 6]);",
                  "err": {},
                  "uuid": "4e981f6f-98f5-489b-b776-13e284fd5013",
                  "parentUUID": "7e3e86de-2357-48e8-bf68-3feb0cb8d4ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67773873-cb0f-4eaa-ba3c-f07698522b3b",
                "220615a5-8b66-4c8d-a655-0b4a5421342b",
                "4e981f6f-98f5-489b-b776-13e284fd5013"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a694f491-2a6a-4eb5-9fe3-d6dec0eed784",
              "title": "Special Data Types",
              "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/map.test.js",
              "file": "/test/map.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle arrays with different data types",
                  "fullTitle": "Tests for map.js Special Data Types should handle arrays with different data types",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringify = (x) => String(x);\nexpect(map([1, \"a\", true, null], stringify)).to.deep.equal([\n  \"1\",\n  \"a\",\n  \"true\",\n  \"null\",\n]);",
                  "err": {},
                  "uuid": "8704a165-6886-4144-a634-47f7871e2831",
                  "parentUUID": "a694f491-2a6a-4eb5-9fe3-d6dec0eed784",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with nested arrays",
                  "fullTitle": "Tests for map.js Special Data Types should work with nested arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const flatten = (arr) => arr.join(\"-\");\nexpect(map([[1, 2], [3, 4], [5]], flatten)).to.deep.equal([\n  \"1-2\",\n  \"3-4\",\n  \"5\",\n]);",
                  "err": {},
                  "uuid": "454e4a99-8f43-4040-8b7c-30427103cc56",
                  "parentUUID": "a694f491-2a6a-4eb5-9fe3-d6dec0eed784",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8704a165-6886-4144-a634-47f7871e2831",
                "454e4a99-8f43-4040-8b7c-30427103cc56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
          "title": "Tests for toNumber.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should convert an integer given as a string",
              "fullTitle": "Tests for toNumber.js should convert an integer given as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('123')).to.equal(123);",
              "err": {},
              "uuid": "040be022-69d6-4f34-ab7f-efcaf3496438",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a negative integer given as a string",
              "fullTitle": "Tests for toNumber.js should convert a negative integer given as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('-123')).to.equal(-123);",
              "err": {},
              "uuid": "2974647d-736f-4164-a8ec-c5bf0342a29c",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore leading/trailing whitespace",
              "fullTitle": "Tests for toNumber.js should ignore leading/trailing whitespace",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(' 123 ')).to.equal(123);",
              "err": {},
              "uuid": "c2075a33-e75c-4028-83dd-d6145c51f7ad",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a float given as a string",
              "fullTitle": "Tests for toNumber.js should convert a float given as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('12.3')).to.equal(12.3);",
              "err": {},
              "uuid": "bb8dbef5-3196-4093-9fbf-68fe27ee87c4",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a float with 0 in the fractional part, given as a string",
              "fullTitle": "Tests for toNumber.js should convert a float with 0 in the fractional part, given as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('12.00')).to.equal(12);",
              "err": {},
              "uuid": "35fbfb05-3cc4-48f3-be7c-3a362c36daea",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a number given in scientific notation with negative power",
              "fullTitle": "Tests for toNumber.js should convert a number given in scientific notation with negative power",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('123e-1')).to.equal(12.3);",
              "err": {},
              "uuid": "acf78ed6-f420-4c65-998e-395fcb1e7212",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a number given in scientific notation with positive power",
              "fullTitle": "Tests for toNumber.js should convert a number given in scientific notation with positive power",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('123e1')).to.equal(1230);",
              "err": {},
              "uuid": "afe191bc-4529-4631-8e0e-c50eccb989f3",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert an empty-string to 0",
              "fullTitle": "Tests for toNumber.js should convert an empty-string to 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('')).to.equal(0);",
              "err": {},
              "uuid": "5d1cc2aa-0752-455e-8d0e-cc6631bd7e6a",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert null to 0",
              "fullTitle": "Tests for toNumber.js should convert null to 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0);",
              "err": {},
              "uuid": "29a868b0-d1c6-4b6f-9e02-dfe6fd68aa56",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a number given in hexadecimal notation",
              "fullTitle": "Tests for toNumber.js should convert a number given in hexadecimal notation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('0x11')).to.equal(17);",
              "err": {},
              "uuid": "1841372e-e2c4-44bd-9388-d0e9bfd4f317",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a number given in binary notation",
              "fullTitle": "Tests for toNumber.js should convert a number given in binary notation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('0b11')).to.equal(3);",
              "err": {},
              "uuid": "18a9251b-3d21-4355-a16c-0fae1914a907",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a number given in octal notation",
              "fullTitle": "Tests for toNumber.js should convert a number given in octal notation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('0o11')).to.equal(9);",
              "err": {},
              "uuid": "71b8d709-c96c-42e0-88e8-b6893556a24e",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert the string \"Infinity\" to Infinity",
              "fullTitle": "Tests for toNumber.js should convert the string \"Infinity\" to Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('Infinity')).to.equal(Infinity);",
              "err": {},
              "uuid": "efd34057-36f0-49e4-a4e7-61f019e3772a",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert the string \"-Infinity\" to -Infinity",
              "fullTitle": "Tests for toNumber.js should convert the string \"-Infinity\" to -Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('-Infinity')).to.equal(-Infinity);",
              "err": {},
              "uuid": "dffef3f0-c110-4277-9c86-38340578ec5d",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a non-special string to NaN",
              "fullTitle": "Tests for toNumber.js should convert a non-special string to NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('foo')).to.be.NaN;",
              "err": {},
              "uuid": "3963e874-59d5-4b2f-8564-2c15b3449e21",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert undefined to NaN",
              "fullTitle": "Tests for toNumber.js should convert undefined to NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "74b1698a-555e-4b93-8ce5-254bb51ee156",
              "parentUUID": "0824da2b-6bec-4ff8-b1be-4f7bab9afea8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "040be022-69d6-4f34-ab7f-efcaf3496438",
            "2974647d-736f-4164-a8ec-c5bf0342a29c",
            "c2075a33-e75c-4028-83dd-d6145c51f7ad",
            "bb8dbef5-3196-4093-9fbf-68fe27ee87c4",
            "35fbfb05-3cc4-48f3-be7c-3a362c36daea",
            "acf78ed6-f420-4c65-998e-395fcb1e7212",
            "afe191bc-4529-4631-8e0e-c50eccb989f3",
            "5d1cc2aa-0752-455e-8d0e-cc6631bd7e6a",
            "29a868b0-d1c6-4b6f-9e02-dfe6fd68aa56",
            "1841372e-e2c4-44bd-9388-d0e9bfd4f317",
            "18a9251b-3d21-4355-a16c-0fae1914a907",
            "71b8d709-c96c-42e0-88e8-b6893556a24e",
            "efd34057-36f0-49e4-a4e7-61f019e3772a",
            "dffef3f0-c110-4277-9c86-38340578ec5d",
            "3963e874-59d5-4b2f-8564-2c15b3449e21",
            "74b1698a-555e-4b93-8ce5-254bb51ee156"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
          "title": "Tests for toString.js",
          "fullFile": "/Users/caoxantb/Personal/Tampere University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/toString.test.js",
          "file": "/test/toString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should convert null to an empty string",
              "fullTitle": "Tests for toString.js should convert null to an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(null)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to equal ''",
                "estack": "AssertionError: expected 'null' to equal ''\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/toString.test.js:6:31)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": "- null\n"
              },
              "uuid": "1da17735-0d16-4e58-ac1b-ed595d08a930",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert undefined to an empty string",
              "fullTitle": "Tests for toString.js should convert undefined to an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(undefined)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to equal ''",
                "estack": "AssertionError: expected 'undefined' to equal ''\n    at Context.<anonymous> (file:///Users/caoxantb/Personal/Tampere%20University/tu-test/assignment/COMP.SE.200-2024-2025-1/test/toString.test.js:10:36)\n    at process.processImmediate (node:internal/timers:511:21)",
                "diff": "- undefined\n"
              },
              "uuid": "c432b921-7758-489a-ba79-fbcd046d596e",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert -0 to \"-0\"",
              "fullTitle": "Tests for toString.js should convert -0 to \"-0\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-0)).to.equal('-0');",
              "err": {},
              "uuid": "44fd292e-b1cf-41f8-aeb2-1df45fde2ce3",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert an array to a comma-separated string",
              "fullTitle": "Tests for toString.js should convert an array to a comma-separated string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString([1, 2, 3])).to.equal('1,2,3');",
              "err": {},
              "uuid": "9e49792b-9fda-446a-b003-93890a7d3ed8",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a number to a string",
              "fullTitle": "Tests for toString.js should convert a number to a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(123)).to.equal('123');",
              "err": {},
              "uuid": "a0c9598c-8fcd-41a5-9085-8572c0a64bde",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a string to itself",
              "fullTitle": "Tests for toString.js should convert a string to itself",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString('abc')).to.equal('abc');",
              "err": {},
              "uuid": "46693202-54fd-41ee-ab96-cc784c8efd1a",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a boolean true to \"true\"",
              "fullTitle": "Tests for toString.js should convert a boolean true to \"true\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(true)).to.equal('true');",
              "err": {},
              "uuid": "dd44ba2c-41f2-45ae-b75a-f1be5259b1af",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a boolean false to \"false\"",
              "fullTitle": "Tests for toString.js should convert a boolean false to \"false\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(false)).to.equal('false');",
              "err": {},
              "uuid": "057c9683-456d-4de0-b917-4be6b6f91158",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert an object to \"[object Object]\"",
              "fullTitle": "Tests for toString.js should convert an object to \"[object Object]\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString({})).to.equal('[object Object]');",
              "err": {},
              "uuid": "c7ba2ea9-87e6-4f13-854b-7443c800ff45",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a symbol to its string representation",
              "fullTitle": "Tests for toString.js should convert a symbol to its string representation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbol = Symbol('sym');\nexpect(toString(symbol)).to.equal('Symbol(sym)');",
              "err": {},
              "uuid": "efe045b6-5e80-43bb-85fb-4f6673ee0876",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert a function to its string representation",
              "fullTitle": "Tests for toString.js should convert a function to its string representation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function testFn() {}\nexpect(toString(testFn)).to.equal('function testFn() {}');",
              "err": {},
              "uuid": "2c34bdbe-ade2-4089-8dda-73e25856c6b3",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert NaN to \"NaN\"",
              "fullTitle": "Tests for toString.js should convert NaN to \"NaN\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(NaN)).to.equal('NaN');",
              "err": {},
              "uuid": "1fd37b2f-6207-4214-bd9c-cf74ce52692d",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert Infinity to \"Infinity\"",
              "fullTitle": "Tests for toString.js should convert Infinity to \"Infinity\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(Infinity)).to.equal('Infinity');",
              "err": {},
              "uuid": "76ae2a9a-957c-438e-b0ef-7251144622aa",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert -Infinity to \"-Infinity\"",
              "fullTitle": "Tests for toString.js should convert -Infinity to \"-Infinity\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-Infinity)).to.equal('-Infinity');",
              "err": {},
              "uuid": "a9f6cb5a-9ab1-40a1-9e27-8b806a78ff96",
              "parentUUID": "03f47dc4-a07b-4186-8193-e11a1d6dd47e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "44fd292e-b1cf-41f8-aeb2-1df45fde2ce3",
            "9e49792b-9fda-446a-b003-93890a7d3ed8",
            "a0c9598c-8fcd-41a5-9085-8572c0a64bde",
            "46693202-54fd-41ee-ab96-cc784c8efd1a",
            "dd44ba2c-41f2-45ae-b75a-f1be5259b1af",
            "057c9683-456d-4de0-b917-4be6b6f91158",
            "c7ba2ea9-87e6-4f13-854b-7443c800ff45",
            "efe045b6-5e80-43bb-85fb-4f6673ee0876",
            "2c34bdbe-ade2-4089-8dda-73e25856c6b3",
            "1fd37b2f-6207-4214-bd9c-cf74ce52692d",
            "76ae2a9a-957c-438e-b0ef-7251144622aa",
            "a9f6cb5a-9ab1-40a1-9e27-8b806a78ff96"
          ],
          "failures": [
            "1da17735-0d16-4e58-ac1b-ed595d08a930",
            "c432b921-7758-489a-ba79-fbcd046d596e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}